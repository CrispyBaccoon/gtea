#!/bin/sh -e

#!/usr/bin/env sh

changelog() {
  case "$1" in
    --since) HASH=${2:-"@@{1}"};;
    *) [[ -z "$1" ]] && HASH="@@{1}" || HASH="HEAD~$1";
  esac
  git -c pager.show=false show --format=" - %C(yellow)%h%C(reset) %<(80,trunc)%s" -q $HASH..@@{0}
}

#!/usr/bin/env sh

clone() {
  gh repo clone $@
}

#!/usr/bin/env sh

create() {
  name=${1:-$(basename $PWD)}
  gh repo create $name --public --source=. --remote=origin --push
}

#!/usr/bin/env sh

init() {
  git init
}

#!/usr/bin/env sh

msg() {
    printf "\033[32;1m%s\033[m %s\n" "$PROMPT" "$*"
}

warn() {
    >&2 printf "\033[33;1m%s \033[mwarning: %s\n" "$PROMPT" "$*"
}

die() {
    >&2 printf "\033[31;1m%s \033[merror: %s\n" "$PROMPT" "$*"
    exit 1
}

confirm() {
    >&2 printf "\033[33;1m%s \033[mconfirm? %s" "$PROMPT" "$CONFIRM_PROMPT"
    read -r ans
    if [ "$ans" != y ] ; then
        >&2 printf '%s\n' 'Exiting.'
        exit
    fi
}

usage() {
>&2 cat <<"EOF"
        [i]  -  init
    [clone]  -  clone
   [create]  -  create [repo]
        [s]  -  sync
       [cl]  -  changelog [N of commits|--since HASH]
EOF
exit 1
}

main() {
  [ "$1" ] || usage

  flag=${1#-}
  shift

  case $flag in
        i) init $@ ;;
        clone) clone $@ ;;
        create) create $@ ;;
        s) sync $@ ;;
        cl) changelog $@ ;;
        *) die "command does not exist" ;;
  esac
}

#!/usr/bin/env sh

sync() {
  gh repo sync
}

main "$@"
